from CONSTANT.table_constants import  *
from app.main.external_files.export_data_base import ExportDataBase

class ExportReturnCancelOrderData(ExportDataBase):
    def __init__(self, getQueryMethod, container=None):
        super().__init__()

        # Setting download locationa and file location in app
        self.setFilePaths(file_name_prefix="return_cancel_order")
        
        # Creating DataFrame for main return cancel order table similar to 2d object
        self.createDataFrame(lambda: getQueryMethod())


        # Getting all the selected return cancel order id
        return_cancel_order_id_tuple = tuple(self.data_frame[RETURN_CANCEL_ORDER_ID].values)
        
        # Custom Column Names for Return Cancel Order
        columns_dictionary_main = {
            RETURN_CANCEL_ORDER_ID: "Return Cancel Order Id",
            RETURN_CANCEL_ORDER_FOREIGNKEY_SALES_ORDER_ID: "Sales Order Id",
            RETURN_CANCEL_ORDER_FOREIGNKEY_PURCHASE_ORDER_ID: "Purchase Order Id",
            RETURN_CANCEL_ORDER_STATUS: "Order Status",
            RETURN_CANCEL_ORDER_TOTAL_REFUND_AMOUNT: "Total Amount Refunded (INR)",
            RETURN_CANCEL_ORDER_FOREIGNKEY_USER_ID: "Generated By (User Id)",
            USERNAME: "Generated By (Username)",
            CREATED_AT: "Generated At",
        }
        # Give custom column names to the DataFrame of Return Cancel Order
        self.data_frame = self.data_frame.rename(columns=columns_dictionary_main)

        # Write the data to an Excel file
        self.data_frame.to_excel(self.writer, sheet_name="Return Cancel Order Details", index=False, na_rep="")
        # Query for get RETURN_CANCEL_ORDER_PRODUCT
        if len(return_cancel_order_id_tuple) == 1:
            # When only one element in tuple (1,) comma will give error in sql statement
            query_return_cancel_order_product = f"""SELECT * FROM  `{RETURN_CANCEL_ORDER_PRODUCT_TABLE_NAME}` 
            WHERE `{R_C_O_P_FOREIGNKEY_RETURN_CANCEL_ORDER_ID}` IN ({return_cancel_order_id_tuple[0]});"""
        else:
            query_return_cancel_order_product = f"""SELECT * FROM  `{RETURN_CANCEL_ORDER_PRODUCT_TABLE_NAME}` 
            WHERE `{R_C_O_P_FOREIGNKEY_RETURN_CANCEL_ORDER_ID}` IN {return_cancel_order_id_tuple};"""

        # Creating DataFrame for main return cancel order products table similar to 2d object
        self.createDataFrame(query_str=query_return_cancel_order_product)

        # Remove first Column
        self.data_frame.pop(R_C_O_P_ID)
        # Custom Column Names for Return Cancel Order
        columns_dictionary_sub = {
            R_C_O_P_ID: "Id",
            R_C_O_P_FOREIGNKEY_RETURN_CANCEL_ORDER_ID: "Return Cancel Order Id",
            R_C_O_P_FOREIGNKEY_PRODUCT_ID: "Product Id",
            PRODUCT_NAME: "Product Name",
            R_C_O_P_PRODUCT_CANCEL_QUANTITY: "Quantity mark for Cancellation",
            R_C_O_P_PRODUCT_RETURN_QUANTITY: "Quantity mark for Return",
            R_C_O_P_PRODUCT_REFUND_AMOUNT: "Amount Refunded (INR)",
            R_C_O_P_REASON: "Reason for Return/Cancel",
            CREATED_AT: "Generated At",
        }
        # Give custom column names to the DataFrame of Return Cancel Order
        self.data_frame = self.data_frame.rename(columns=columns_dictionary_sub)

        # Write the data to an Excel file
        self.data_frame.to_excel(self.writer, sheet_name="Product Details in Orders", index=False, na_rep="")

        # set width and center alignments to all columns
        self.configureExcelSheetsWidthAndAlignment(sheet_names = ["Return Cancel Order Details", "Product Details in Orders"])

        if type(container) == None.__class__:
            # Moving excel file from app to downloads
            self.moveFileToDownload()
        else:
            # Moving excel file from app to downloads
            self.moveFileToDownload(container)
